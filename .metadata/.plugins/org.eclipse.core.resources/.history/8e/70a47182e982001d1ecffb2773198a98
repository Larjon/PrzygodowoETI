package entity;


import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.io.IOException;

import javax.imageio.ImageIO;

import main.GamePanel;
import main.KeyHandler;

public class Player extends Entity{
	
	GamePanel gp;
	KeyHandler keyH;
	
	public final int screenX;
	public final int screenY;
	
	public Player(GamePanel gp, KeyHandler keyH) {
		
		this.gp = gp;
		this.keyH = keyH;
		
		screenX = gp.screenWidth/2 - (gp.tileSize/2);
		screenY = gp.screenHeight/2 - (gp.tileSize/2); //dzielone na tile size aby byl na srodku
		
		solidArea = new Rectangle(); //4 paramtery
		
		solidArea.x = 8;
		solidArea.y = 16;
		solidArea.width = 32;
		solidArea.height = 32;  //hitbox 
		
		
		setDefaultValues();
		getPlayerImage();
	}
	
	public void setDefaultValues() {
		worldX = gp.tileSize *17; //zmiana z x i y to nie jest pozycja ekranu
		worldY = gp.tileSize *17;
		speed = 4;
		direction = "down"; 		//pierwsza pozycja startowa
	}
	
	
	public void getPlayerImage() {
		try {
			
			up1 = ImageIO.read(getClass().getResourceAsStream("/player/przod1.png"));
			up2 = ImageIO.read(getClass().getResourceAsStream("/player/przod2.png"));
			down1 = ImageIO.read(getClass().getResourceAsStream("/player/tyl1.png"));
			down2 = ImageIO.read(getClass().getResourceAsStream("/player/tyl2.png"));
			left1 = ImageIO.read(getClass().getResourceAsStream("/player/lewo1.png"));
			left2 = ImageIO.read(getClass().getResourceAsStream("/player/lewo2.png"));
			right1 = ImageIO.read(getClass().getResourceAsStream("/player/prawo1.png"));
			right2 = ImageIO.read(getClass().getResourceAsStream("/player/prawo2.png"));
			
		}catch(IOException e) {
			e.printStackTrace();
		}
	}
	
	
	public void update() {
		
		
		if(keyH.upPressed == true || keyH.downPressed == true || keyH.leftPressed == true || keyH.rightPressed == true ) {
			
			if(keyH.upPressed == true) {	  // animacja nie jest wykonywana ciągle
				direction = "up";		
						                      // Poruszanie sie za pomocą klawiatury
				
			}
			else if(keyH.downPressed == true) {
				direction = "down";
				
			}
			else if(keyH.leftPressed == true) {
				direction = "left";
				
			}
			else if(keyH.rightPressed == true) {
				direction = "right";
				
			}
			
			//Sprawdzenie kolizji
			
			
			collisionOn = false;
			gp.cChecker.checkTile(this);
			
			//Jezeli colision = false, to nie może się ruszać
			
			if(collisionOn = false) {
				
				switch(direction) {
				case "up":
					worldY -= speed;
					break;
				case "down":
					worldY += speed;
					break;
				case "left":
					worldX -= speed;
					break;
				case "right":
					worldX += speed;
					break;	
				
				}
				
			}
			
			spriteCounter++;				// zmiana wartosci zmiennej ktora deklaruje zmiane obrazka poruszania się
			if(spriteCounter > 12) {
				if(spriteNum == 1) {
					spriteNum = 2;
				}
				else if(spriteNum == 2) {
					spriteNum = 1;
				}
				spriteCounter = 0;
			}
		}
		
	}
	
	public void draw(Graphics2D g2) {
		
		/*
		g2.setColor(Color.white);
		
		g2.fillRect(x, y, gp.tileSize, gp.tileSize);			 //test rysowanie kwadratu
		*/
		
		
		BufferedImage image = null;
		
		switch(direction) {
		case "up":
			
			if(spriteNum == 1) {
				image = up1;
			}
			if(spriteNum == 2) {
				image = up2;
			}
			
			break;
		case "down":
			
			if(spriteNum == 1) {
				image = down1;
			}
			if(spriteNum == 2) {
				image = down2;
			}
			
			break;
		case "left":
			
			if(spriteNum == 1) {
				image = left1;
			}
			if(spriteNum == 2) {
				image = left2;
			}
			
			break;
		case "right":
			
			if(spriteNum == 1) {
				image = right1;
			}
			if(spriteNum == 2) {
				image = right2;
			}
			
			break;	
		
		}
		g2.drawImage(image, screenX, screenY, gp.tileSize, gp.tileSize, null);
		
		
	}
		
	

}
